from tkinter import *
import matplotlib.pyplot as plt
from PIL import ImageTk, Image
from globalemu.eval import evaluate
import numpy as np
import sys


base_dir = sys.argv[1]
if len(sys.argv) > 2:
    xHI=bool(sys.argv[2])
else:
    xHI=False

window = Tk()
window.geometry("800x600")
window.configure(background='white')

def init_signal(mode='null'):
    params = [1e-3, 46.5, 1e-2, 0.0775, 1.25, 1.5, 30]
    if xHI is True:
        idx = [0, 1, 2, 4, 5, 3, 6]
        params = [params[i] for i in idx]
    plt.figure(figsize=(4, 3))
    res = evaluate(params, base_dir=base_dir, xHI=xHI)
    np.savetxt('img/prev_sig.txt', res.signal)
    plt.plot(res.z, res.signal, c='k', label='Signal')
    plt.xlabel('z')
    if xHI is False:
        plt.ylabel(r'$\delta T$ [mK]')
        plt.ylim([-250, 30])
    else:
        plt.ylabel(r'$x_{HI}$')
        plt.ylim([0, 1])
    plt.legend(loc=4)
    plt.tight_layout()
    plt.savefig('img/img.png', dpi=100)
    plt.close()
    if mode == 'reset':
        new_img = ImageTk.PhotoImage(Image.open("img/img.png"))
        panel.configure(image=new_img)
        panel.image=new_img

def signal():#dummy):
    f_star = 10**float(f_star_entry.get())
    Vc = float(Vc_entry.get())
    f_x = 10**float(f_x_entry.get())
    tau = float(tau_entry.get())
    alpha = float(alpha_entry.get())
    nu_min = float(nu_min_entry.get())
    rmfp = float(rmfp_entry.get())
    params = [f_star, Vc, f_x, tau, alpha, nu_min, rmfp]
    if xHI is True:
        idx = [0, 1, 2, 4, 5, 3, 6]
        params = [params[i] for i in idx]
    old_sig = np.loadtxt('img/prev_sig.txt')
    res = evaluate(params, base_dir=base_dir, xHI=xHI)
    np.savetxt('img/prev_sig.txt', res.signal)
    plt.figure(figsize=(4, 3))
    plt.plot(res.z, res.signal, c='k', label='New Signal')
    plt.plot(res.z, old_sig, c='k', alpha=0.5, ls='--', label='Previous')
    plt.xlabel('z')
    if xHI is False:
        plt.ylabel(r'$\delta T$ [mK]')
        plt.ylim([-250, 30])
    else:
        plt.ylabel(r'$x_{HI}$')
        plt.ylim([0, 1])
    plt.legend(loc=4)
    plt.tight_layout()
    plt.savefig('img/img.png', dpi=100)
    plt.close()
    new_img = ImageTk.PhotoImage(Image.open("img/img.png"))
    panel.configure(image=new_img)
    panel.image=new_img

def reset():
    init_signal('reset')
    f_star_entry.set(np.log10(1e-3))
    Vc_entry.set(46.5)
    f_x_entry.set(np.log10(1e-2))
    tau_entry.set(0.0775)
    alpha_entry.set(1.25)
    nu_min_entry.set(1.5)
    rmfp_entry.set(30)

window.title('21cm Emulator GUI')
init_signal()

img = ImageTk.PhotoImage(Image.open("img/img.png"))
panel = Label(window, image=img)
panel.place(x=20, y=10)

text = Label(window,
    text='Slide the sliders to\nset the values of\nthe astrophysical parameters' +
    ' and\nthen hit generate\nto see the new signal.', bg='white', font='sans')
text.place(x=460, y=10)

f_star_entry = Scale(window, from_=-6, to=-0.3,
    orient=HORIZONTAL, length=325, resolution=0.1,
    tickinterval=1, background='white')
f_star_entry.place(x=10, y=340)
f_star_entry.set(np.log10(1e-3))
label = Label(window, text='log(f_*)')
label.place(x=345, y=360)

Vc_entry = Scale(window, from_=16.5, to=76.5,
    orient=HORIZONTAL, length=325, resolution=0.1,
    tickinterval=5, background='white')
Vc_entry.place(x=405, y=340)
Vc_entry.set(46.5)
label = Label(window, text='V_c')
label.place(x=740, y=360)

f_x_entry = Scale(window, from_=-6, to=2,
    orient=HORIZONTAL, length=325, resolution=0.1,
    tickinterval=1, background='white')
f_x_entry.place(x=10, y=400)
f_x_entry.set(np.log10(1e-2))
label = Label(window, text='log(f_x)')
label.place(x=345, y=410)

tau_entry = Scale(window, from_=0.055, to=0.1,
    orient=HORIZONTAL, length=325, resolution=0.001,
    tickinterval=0.01, background='white')
tau_entry.place(x=405, y=400)
tau_entry.set(0.0775)
label = Label(window, text=r'$\tau$')
label.place(x=740, y=410)

alpha_entry = Scale(window, from_=1, to=1.5,
    orient=HORIZONTAL, length=325, resolution=0.01,
    tickinterval=0.1, background='white')
alpha_entry.place(x=10, y=460)
alpha_entry.set(1.25)
label = Label(window, text=r'$\alpha$')
label.place(x=345, y=470)

nu_min_entry = Scale(window, from_=0.1, to=3,
    orient=HORIZONTAL, length=325, resolution=0.1,
    tickinterval=0.5, background='white')
nu_min_entry.place(x=405, y=460)
nu_min_entry.set(1.5)
label = Label(window, text='nu_min')
label.place(x=740, y=470)

rmfp_entry = Scale(window, from_=10, to=50,
    orient=HORIZONTAL, length=325, resolution=1,
    tickinterval=10, background='white')
rmfp_entry.place(x=10, y=520)
rmfp_entry.set(30)
label = Label(window, text='rmfp')
label.place(x=345, y=530)

btn = Button(window, text='Generate', command=signal)
btn.place(x=550, y=150)

btn = Button(window, text='Reset', command=reset)
btn.place(x=560, y=200)

window.mainloop()
